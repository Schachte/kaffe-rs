{"version":3,"sources":["../src/lib/utils/util.ts","../src/lib/polyfill.ts","../src/lib/plugin.ts"],"names":["path","builtinModules","resolve","loadPackageJSON","resolveExports","resolveModule","join","readFile","process","polyfillPath"],"mappings":"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","file":"index.js","sourcesContent":["export const escapeRegex = (str: string) => str.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n\nexport const commonJsTemplate = ({ importPath }: { importPath: string }) => `export * from '${importPath}'`;\n\nexport const normalizeNodeBuiltinPath = (path: string) => path.replace(/^node:/, '').replace(/\\/$/, '');\n","import { readFile } from 'node:fs/promises';\nimport { builtinModules } from 'node:module';\nimport { resolve, join } from 'node:path';\n\nimport { loadPackageJSON, resolveModule } from 'local-pkg';\nimport { resolve as resolveExports } from 'resolve.exports';\n\nimport { normalizeNodeBuiltinPath } from './utils/util.js';\n\nasync function polyfillPath(importPath: string) {\n\tif (!builtinModules.includes(importPath))\n\t\tthrow new Error(`Node.js does not have ${importPath} in its builtin modules`);\n\n\tconst jspmPath = resolve(\n\t\trequire.resolve(`@jspm/core/nodelibs/${importPath}`),\n\t\t// ensure sub path modules are resolved properly\n\t\t'../../..' + (importPath.includes('/') ? '/..' : ''),\n\t);\n\n\tconst jspmPackageJson = await loadPackageJSON(jspmPath);\n\tconst exportPath = resolveExports(jspmPackageJson, `./nodelibs/${importPath}`, {\n\t\tbrowser: true,\n\t});\n\n\tconst exportFullPath = resolveModule(join(jspmPath, exportPath?.[0] ?? ''));\n\n\tif (!exportPath || !exportFullPath) {\n\t\tthrow new Error(\n\t\t\t'resolving failed, please try creating an issue in https://github.com/imranbarbhuiya/esbuild-plugins-node-modules-polyfill',\n\t\t);\n\t}\n\n\treturn exportFullPath;\n}\n\nconst polyfillPathCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillPath = (importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(importPath);\n\n\tconst cachedPromise = polyfillPathCache.get(normalizedImportPath);\n\tif (cachedPromise) return cachedPromise;\n\n\tconst promise = polyfillPath(normalizedImportPath);\n\tpolyfillPathCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n\nexport const polyfillContentAndTransform = async (importPath: string) => {\n\tconst exportFullPath = await getCachedPolyfillPath(importPath);\n\n\tconst content = await readFile(exportFullPath, 'utf8');\n\n\treturn content.replace(/eval\\(/g, '(0,eval)(');\n};\n\nconst polyfillContentCache: Map<string, Promise<string>> = new Map();\nexport const getCachedPolyfillContent = (_importPath: string): Promise<string> => {\n\tconst normalizedImportPath = normalizeNodeBuiltinPath(_importPath);\n\n\tconst cachedPromise = polyfillContentCache.get(normalizedImportPath);\n\tif (cachedPromise) return cachedPromise;\n\n\tconst promise = polyfillContentAndTransform(normalizedImportPath);\n\tpolyfillContentCache.set(normalizedImportPath, promise);\n\treturn promise;\n};\n","import { builtinModules } from 'node:module';\nimport path from 'node:path';\nimport process from 'node:process';\n\nimport { loadPackageJSON } from 'local-pkg';\n\nimport { getCachedPolyfillContent, getCachedPolyfillPath } from './polyfill.js';\nimport { escapeRegex, commonJsTemplate, normalizeNodeBuiltinPath } from './utils/util.js';\n\nimport type { OnResolveArgs, OnResolveResult, PartialMessage, Plugin } from 'esbuild';\nimport type esbuild from 'esbuild';\n\nconst NAME = 'node-modules-polyfills';\n\nexport interface NodePolyfillsOptions {\n\tfallback?: 'empty' | 'error' | 'none';\n\tformatError?: (\n\t\tthis: void,\n\t\targs: {\n\t\t\timporter: string;\n\t\t\tmoduleName: string;\n\t\t\tpolyfillExists: boolean;\n\t\t},\n\t) => PartialMessage | Promise<PartialMessage>;\n\tglobals?: {\n\t\tBuffer?: boolean;\n\t\tprocess?: boolean;\n\t};\n\tmodules?: Record<string, boolean | 'empty' | 'error'> | string[];\n\tname?: string;\n\tnamespace?: string;\n}\n\nconst loader = async (args: esbuild.OnLoadArgs): Promise<esbuild.OnLoadResult> => {\n\ttry {\n\t\tconst isCommonjs = args.namespace.endsWith('commonjs');\n\n\t\tconst resolved = await getCachedPolyfillPath(args.path);\n\t\tconst resolveDir = path.dirname(resolved);\n\n\t\tif (isCommonjs) {\n\t\t\treturn {\n\t\t\t\tloader: 'js',\n\t\t\t\tcontents: commonJsTemplate({\n\t\t\t\t\timportPath: args.path,\n\t\t\t\t}),\n\t\t\t\tresolveDir,\n\t\t\t};\n\t\t}\n\n\t\tconst contents = await getCachedPolyfillContent(args.path);\n\n\t\treturn {\n\t\t\tloader: 'js',\n\t\t\tcontents,\n\t\t\tresolveDir,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error('node-modules-polyfill', error);\n\t\treturn {\n\t\t\tcontents: `export {}`,\n\t\t\tloader: 'js',\n\t\t};\n\t}\n};\n\nexport const nodeModulesPolyfillPlugin = (options: NodePolyfillsOptions = {}): Plugin => {\n\tconst {\n\t\tglobals = {},\n\t\tmodules: modulesOption = builtinModules,\n\t\tfallback = 'none',\n\t\tformatError,\n\t\tnamespace = NAME,\n\t\tname = NAME,\n\t} = options;\n\tif (namespace.endsWith('commonjs')) throw new Error(`namespace ${namespace} must not end with commonjs`);\n\n\tif (namespace.endsWith('empty')) throw new Error(`namespace ${namespace} must not end with empty`);\n\n\tif (namespace.endsWith('error')) throw new Error(`namespace ${namespace} must not end with error`);\n\n\tconst modules = Array.isArray(modulesOption)\n\t\t? Object.fromEntries(modulesOption.map((mod) => [mod, true]))\n\t\t: modulesOption;\n\n\tconst commonjsNamespace = `${namespace}-commonjs`;\n\tconst emptyNamespace = `${namespace}-empty`;\n\tconst errorNamespace = `${namespace}-error`;\n\n\tconst shouldDetectErrorModules = fallback === 'error' || Object.values(modules).includes('error');\n\n\treturn {\n\t\tname,\n\t\t// eslint-disable-next-line @typescript-eslint/unbound-method\n\t\tsetup: ({ onLoad, onResolve, onEnd, initialOptions }) => {\n\t\t\tif (shouldDetectErrorModules && initialOptions.write !== false)\n\t\t\t\tthrow new Error(`The \"write\" build option must be set to false when using the \"error\" polyfill type`);\n\n\t\t\tconst root = initialOptions.absWorkingDir ?? process.cwd();\n\n\t\t\t// polyfills contain global keyword, it must be defined\n\t\t\tif (initialOptions.define && !initialOptions.define.global) initialOptions.define.global = 'globalThis';\n\t\t\telse if (!initialOptions.define) initialOptions.define = { global: 'globalThis' };\n\n\t\t\tinitialOptions.inject = initialOptions.inject ?? [];\n\n\t\t\tif (globals.Buffer) initialOptions.inject.push(path.resolve(__dirname, '../globals/Buffer.js'));\n\n\t\t\tif (globals.process) initialOptions.inject.push(path.resolve(__dirname, '../globals/process.js'));\n\n\t\t\tonLoad({ filter: /.*/, namespace: emptyNamespace }, () => ({\n\t\t\t\tloader: 'js',\n\t\t\t\t// Use an empty CommonJS module here instead of ESM to avoid\n\t\t\t\t// \"No matching export\" errors in esbuild for anything that\n\t\t\t\t// is imported from this file.\n\t\t\t\tcontents: 'module.exports = {}',\n\t\t\t}));\n\n\t\t\tonLoad({ filter: /.*/, namespace: errorNamespace }, (args) => ({\n\t\t\t\tloader: 'js',\n\t\t\t\tcontents: `module.exports = ${JSON.stringify(\n\t\t\t\t\t// This encoded string is detected and parsed at the end of the build to report errors\n\t\t\t\t\t`__POLYFILL_ERROR_START__::MODULE::${args.path}::IMPORTER::${args.pluginData.importer}::__POLYFILL_ERROR_END__`,\n\t\t\t\t)}`,\n\t\t\t}));\n\n\t\t\tonLoad({ filter: /.*/, namespace }, loader);\n\t\t\tonLoad({ filter: /.*/, namespace: commonjsNamespace }, loader);\n\n\t\t\t// If we are using fallbacks, we need to handle all builtin modules so that we can replace their contents,\n\t\t\t// otherwise we only need to handle the modules that are configured (which is everything by default)\n\t\t\tconst bundledModules =\n\t\t\t\tfallback === 'none'\n\t\t\t\t\t? Object.keys(modules).filter((moduleName) => builtinModules.includes(moduleName))\n\t\t\t\t\t: builtinModules;\n\n\t\t\tconst filter = new RegExp(`^(?:node:)?(?:${bundledModules.map(escapeRegex).join('|')})$`);\n\n\t\t\tconst resolver = async (args: OnResolveArgs): Promise<OnResolveResult | undefined> => {\n\t\t\t\tconst result = {\n\t\t\t\t\tempty: {\n\t\t\t\t\t\tnamespace: emptyNamespace,\n\t\t\t\t\t\tpath: args.path,\n\t\t\t\t\t\tsideEffects: false,\n\t\t\t\t\t},\n\t\t\t\t\terror: {\n\t\t\t\t\t\tnamespace: errorNamespace,\n\t\t\t\t\t\tpath: args.path,\n\t\t\t\t\t\tsideEffects: false,\n\t\t\t\t\t\tpluginData: {\n\t\t\t\t\t\t\timporter: path.relative(root, args.importer).replace(/\\\\/g, '/'),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tnone: undefined,\n\t\t\t\t} as const satisfies Record<string, OnResolveResult | undefined>;\n\n\t\t\t\t// https://github.com/defunctzombie/package-browser-field-spec\n\t\t\t\tif (initialOptions.platform === 'browser') {\n\t\t\t\t\tconst packageJson = await loadPackageJSON(args.resolveDir);\n\t\t\t\t\tconst browserFieldValue = packageJson?.browser as unknown as\n\t\t\t\t\t\t| Record<string, string | false>\n\t\t\t\t\t\t| string\n\t\t\t\t\t\t| undefined;\n\n\t\t\t\t\tif (typeof browserFieldValue === 'string') return;\n\t\t\t\t\tconst browserFieldValueForModule = browserFieldValue?.[args.path];\n\n\t\t\t\t\t// This is here to support consumers who have used the\n\t\t\t\t\t// \"external\" option to exclude all Node builtins (e.g.\n\t\t\t\t\t// Remix v1 does this), otherwise the import/require is left\n\t\t\t\t\t// in the output and throws an error at runtime. Ideally we\n\t\t\t\t\t// would just return undefined for any browser field value,\n\t\t\t\t\t// and we can safely switch to this in a major version.\n\t\t\t\t\tif (browserFieldValueForModule === false) return result.empty;\n\n\t\t\t\t\tif (browserFieldValueForModule !== undefined) return;\n\t\t\t\t}\n\n\t\t\t\tconst moduleName = normalizeNodeBuiltinPath(args.path);\n\t\t\t\tconst polyfillOption = modules[moduleName];\n\n\t\t\t\tif (!polyfillOption) return result[fallback];\n\n\t\t\t\tif (polyfillOption === 'error' || polyfillOption === 'empty') return result[polyfillOption];\n\n\t\t\t\tconst polyfillPath = await getCachedPolyfillPath(moduleName).catch(() => null);\n\n\t\t\t\tif (!polyfillPath) return result[fallback];\n\n\t\t\t\tconst ignoreRequire = args.namespace === commonjsNamespace;\n\t\t\t\tconst isCommonjs = !ignoreRequire && args.kind === 'require-call';\n\n\t\t\t\treturn {\n\t\t\t\t\tnamespace: isCommonjs ? commonjsNamespace : namespace,\n\t\t\t\t\tpath: args.path,\n\t\t\t\t\tsideEffects: false,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tonResolve({ filter }, resolver);\n\n\t\t\tonEnd(async ({ outputFiles = [] }) => {\n\t\t\t\t// This logic needs to be run when the build is complete because\n\t\t\t\t// we need to check the output files after tree-shaking has been\n\t\t\t\t// performed. If we did this in the onLoad hook, we could throw\n\t\t\t\t// errors for modules that are not even present in the final\n\t\t\t\t// output. This is particularly important when building projects\n\t\t\t\t// that target both server and browser since the browser build\n\t\t\t\t// may not use all of the modules that the server build does. If\n\t\t\t\t// you're only building for the browser, this feature is less\n\t\t\t\t// useful since any unpolyfilled modules will be treated just\n\t\t\t\t// like any other missing module.\n\n\t\t\t\tif (!shouldDetectErrorModules) return;\n\n\t\t\t\tconst errors: PartialMessage[] = [];\n\n\t\t\t\tconst { outfile, outExtension = {} } = initialOptions;\n\t\t\t\tconst jsExtension = outfile ? path.extname(outfile) : outExtension['.js'] || '.js';\n\t\t\t\tconst jsFiles = outputFiles.filter((file) => path.extname(file.path) === jsExtension);\n\n\t\t\t\tfor (const file of jsFiles) {\n\t\t\t\t\tconst matches = file.text.matchAll(\n\t\t\t\t\t\t/__POLYFILL_ERROR_START__::MODULE::(?<moduleName>.+?)::IMPORTER::(?<importer>.+?)::__POLYFILL_ERROR_END__/g,\n\t\t\t\t\t);\n\n\t\t\t\t\tfor (const { groups } of matches) {\n\t\t\t\t\t\tconst { moduleName, importer } = groups!;\n\t\t\t\t\t\tconst polyfillExists = (await getCachedPolyfillPath(moduleName).catch(() => null)) !== null;\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\tpluginName: name,\n\t\t\t\t\t\t\ttext: polyfillExists\n\t\t\t\t\t\t\t\t? `Polyfill has not been configured for \"${moduleName}\", imported by \"${importer}\"`\n\t\t\t\t\t\t\t\t: `Polyfill does not exist for \"${moduleName}\", imported by \"${importer}\"`,\n\t\t\t\t\t\t\t...(formatError ? await formatError({ moduleName, importer, polyfillExists }) : {}),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { errors };\n\t\t\t});\n\t\t},\n\t};\n};\n"]}